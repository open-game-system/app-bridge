name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: ["**"]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Run tests
      run: pnpm run test
      # This will also run typecheck via the turbo dependency chain 

  publish-dev:
    needs: test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      packages: write
    strategy:
      matrix:
        package: [types, web, native, react, react-native, testing]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        registry-url: 'https://npm.pkg.github.com'
        scope: '@open-game-system'

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies for ${{ matrix.package }}
      run: |
        # Need to install root deps for build tools, and target package deps
        pnpm install --filter @open-game-system/app-bridge-${{ matrix.package }}...

    - name: Build package ${{ matrix.package }}
      run: |
        pnpm turbo run build --filter=@open-game-system/app-bridge-${{ matrix.package }}...

    - name: Generate dev version for ${{ matrix.package }}
      id: version
      run: |
        PACKAGE_DIR="packages/app-bridge-${{ matrix.package }}"
        PACKAGE_JSON_PATH="${PACKAGE_DIR}/package.json"
        
        # Package name from package.json
        PACKAGE_NAME=$(node -p "require('./${PACKAGE_JSON_PATH}').name")
        
        # Extract major version 
        MAJOR_VERSION=$(node -p "require('./${PACKAGE_JSON_PATH}').version.split('.')[0]")
        
        # Generate date
        DATE=$(date +'%Y%m%d')
        
        # Get PR number
        PR_NUMBER=$(echo $GITHUB_REF | sed -n 's/refs\/pull\/\([0-9]*\)\/merge/\1/p')
        
        # Configure npm to use GitHub registry for version check
        echo "Configuring npm to use GitHub registry for @open-game-system..."
        echo "@open-game-system:registry=https://npm.pkg.github.com" >> .npmrc
        echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> .npmrc
        
        # Get published versions to find highest patch
        echo "Checking GitHub registry for existing versions..."
        NPM_VERSIONS=$(npm view ${PACKAGE_NAME} versions --registry https://npm.pkg.github.com/ 2>/dev/null || echo "[]")
        
        # Find highest patch for this PR today
        VERSION_PREFIX="${MAJOR_VERSION}.${DATE}"
        PATTERN="${VERSION_PREFIX}.*-pr${PR_NUMBER}"
        HIGHEST_PATCH=-1
        if [[ "$NPM_VERSIONS" != "[]" ]]; then
          # Need to escape dots for regex and use single quotes to prevent shell expansion
          HIGHEST_PATCH=$(echo "$NPM_VERSIONS" | jq -r --arg prefix "$VERSION_PREFIX" --arg pr "$PR_NUMBER" '
            map(select(test("^" + $prefix + "\\\\.[0-9]+-pr" + $pr + "$"))) |
            map(capture("^" + $prefix + "\\\\.(\\\\d+)-pr" + $pr + "$")[0] | tonumber) |
            max // -1
          ')
        fi
        
        # Increment patch number
        NEXT_PATCH=$((HIGHEST_PATCH + 1))
        
        # Create version: MAJOR.DATE.PATCH-prN
        DEV_VERSION="${MAJOR_VERSION}.${DATE}.${NEXT_PATCH}-pr${PR_NUMBER}"
        
        echo "Generated dev version: ${PACKAGE_NAME}@${DEV_VERSION}"
        echo "DEV_VERSION=${DEV_VERSION}" >> $GITHUB_OUTPUT
        echo "PACKAGE_DIR=${PACKAGE_DIR}" >> $GITHUB_OUTPUT
        echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
      env:
        GITHUB_REF: ${{ github.ref }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in package.json for ${{ matrix.package }}
      run: |
        cd ${{ steps.version.outputs.PACKAGE_DIR }}
        npm version ${{ steps.version.outputs.DEV_VERSION }} --no-git-tag-version --allow-same-version
        
        # Add GitHub registry config using Node.js
        node -e "
          const fs = require('fs');
          const pkgPath = './package.json';
          const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
          if (!pkg.publishConfig) pkg.publishConfig = {};
          pkg.publishConfig.registry = 'https://npm.pkg.github.com/';
          pkg.publishConfig.access = 'public';
          fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
        "

    - name: Publish ${{ matrix.package }} to GitHub Packages
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd ${{ steps.version.outputs.PACKAGE_DIR }}
        MAX_RETRIES=5
        RETRY_COUNT=0
        VERSION=${{ steps.version.outputs.DEV_VERSION }}
        OUTPUT_FILE="npm_publish_output.log"
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          # Capture both stdout and stderr to a file
          npm publish --tag dev > "$OUTPUT_FILE" 2>&1
          ERROR_CODE=$?
          
          echo "--- Attempt ${RETRY_COUNT} --- Exit Code: ${ERROR_CODE} ---" # Debugging line
          
          if [ $ERROR_CODE -eq 0 ]; then
            echo "Successfully published ${VERSION}"
            cat "$OUTPUT_FILE" # Print successful output too
            break
          # Check if exit code is non-zero AND output file contains '409 Conflict'
          elif [[ $ERROR_CODE -ne 0 && $(grep -c "409 Conflict" "$OUTPUT_FILE") -gt 0 ]]; then 
            CURRENT_PATCH=$(echo $VERSION | sed -n 's/.*\.\([0-9]\+\)-pr.*/\1/p')
            if [ -z "$CURRENT_PATCH" ]; then
              echo "Error: Could not extract patch number from version ${VERSION}"
              cat "$OUTPUT_FILE" # Show output before exiting
              exit 1
            fi
            NEXT_PATCH=$((CURRENT_PATCH + 1))
            VERSION=$(echo $VERSION | sed "s/\.[0-9]\+-pr/\.${NEXT_PATCH}-pr/")
            
            echo "Version conflict detected, trying with incremented patch: ${VERSION}"
            # Update package.json version (capture output in case it fails)
            npm version $VERSION --no-git-tag-version --allow-same-version >> "$OUTPUT_FILE" 2>&1
            RETRY_COUNT=$((RETRY_COUNT + 1))
          else
            # Any other non-zero exit code is a real failure
            echo "-----------------------------------------------------"
            echo "NPM PUBLISH FAILED (NON-409):"
            echo "EXIT CODE: ${ERROR_CODE}"
            echo "NPM OUTPUT (from ${OUTPUT_FILE}):"
            cat "$OUTPUT_FILE" # Print the contents of the output file
            echo "-----------------------------------------------------"
            exit $ERROR_CODE
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Failed to publish after ${MAX_RETRIES} retries due to persistent conflicts or other errors."
          echo "Final attempt output:"
          cat "$OUTPUT_FILE"
          exit 1
        fi

    - name: Comment on PR for ${{ matrix.package }}
      uses: actions/github-script@v7
      if: success() # Only comment if publish succeeded
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = context.issue.number;
          const version = '${{ steps.version.outputs.DEV_VERSION }}';
          const packageName = '${{ steps.version.outputs.PACKAGE_NAME }}';
          const repoName = context.repo.owner + '/' + context.repo.repo;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸ“¦ Dev version published for \`${packageName}\`: \`${packageName}@${version}\`\n\nInstall via GitHub Packages (ensure .npmrc is configured):\n\`\`\`bash\npnpm add ${packageName}@${version}\n\`\`\``
          });

  publish-production:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to push version commit
      packages: write # Needed to publish to npm
    strategy:
      matrix:
        package: [types, web, native, react, react-native, testing]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for checkout to allow push later

    - name: Setup Git User
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        registry-url: 'https://registry.npmjs.org' # Target npm registry

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8
        
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies for ${{ matrix.package }}
      run: |
        # Need to install root deps for build tools, and target package deps
        pnpm install --filter @open-game-system/app-bridge-${{ matrix.package }}...

    - name: Build package ${{ matrix.package }}
      run: |
        pnpm turbo run build --filter=@open-game-system/app-bridge-${{ matrix.package }}...
        
    - name: Generate production version for ${{ matrix.package }}
      id: version
      run: |
        PACKAGE_DIR="packages/app-bridge-${{ matrix.package }}"
        PACKAGE_JSON_PATH="${PACKAGE_DIR}/package.json"
        PACKAGE_NAME=$(node -p "require('./${PACKAGE_JSON_PATH}').name")
        MAJOR_VERSION=$(node -p "require('./${PACKAGE_JSON_PATH}').version.split('.')[0]")
        DATE=$(date +'%Y%m%d')
        
        echo "Checking npm for existing versions of ${PACKAGE_NAME} with prefix ${MAJOR_VERSION}.${DATE}..."
        
        # Get published versions, handle errors/empty results
        NPM_VERSIONS=$(npm view ${PACKAGE_NAME} versions --json 2>/dev/null || echo "[]")
        
        # Find highest patch for today
        HIGHEST_PATCH=-1
        if [[ "$NPM_VERSIONS" != "[]" && "$NPM_VERSIONS" != *error* ]]; then
          PATTERN="${MAJOR_VERSION}.${DATE}."
          HIGHEST_PATCH=$(echo "$NPM_VERSIONS" | jq -c --arg pattern "$PATTERN" 'map(select(startswith($pattern))) | map(split(".")[2] | tonumber) | max // -1')
        fi
        
        # Calculate next patch version
        NEXT_PATCH=$((HIGHEST_PATCH + 1))
        NEW_VERSION="${MAJOR_VERSION}.${DATE}.${NEXT_PATCH}"
        
        echo "Generated production version: ${PACKAGE_NAME}@${NEW_VERSION}"
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "PACKAGE_DIR=${PACKAGE_DIR}" >> $GITHUB_OUTPUT
        echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_OUTPUT

    - name: Update version in package.json for ${{ matrix.package }}
      run: |
        cd ${{ steps.version.outputs.PACKAGE_DIR }}
        # Use --allow-same-version in case patch calculation resulted in 0 and current version is also 0
        npm version ${{ steps.version.outputs.NEW_VERSION }} --no-git-tag-version --allow-same-version 
        
        # Ensure public access in package.json for npm
        node -e "
          const fs = require('fs');
          const pkgPath = './package.json';
          const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
          if (!pkg.publishConfig) pkg.publishConfig = {};
          pkg.publishConfig.access = 'public';
          // Remove GH registry if present from dev builds
          delete pkg.publishConfig.registry; 
          fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
        "

    - name: Publish ${{ matrix.package }} to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd ${{ steps.version.outputs.PACKAGE_DIR }}
        npm publish --access public
        echo "NEW_VERSION=${{ steps.version.outputs.NEW_VERSION }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=${{ steps.version.outputs.PACKAGE_NAME }}" >> $GITHUB_ENV
        echo "PACKAGE_DIR=${{ steps.version.outputs.PACKAGE_DIR }}" >> $GITHUB_ENV

  # New job to handle all version bump commits at once
  commit-version-bumps:
    needs: publish-production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git User
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Update Package Versions and Commit
      run: |
        # Define all packages to check
        PACKAGES=("types" "web" "native" "react" "react-native" "testing")
        
        # Flag to track if any changes were made
        CHANGES_MADE=false
        
        for PACKAGE in "${PACKAGES[@]}"; do
          PACKAGE_DIR="packages/app-bridge-${PACKAGE}"
          PACKAGE_JSON="${PACKAGE_DIR}/package.json"
          PACKAGE_NAME=$(node -p "require('./${PACKAGE_JSON}').name")
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./${PACKAGE_JSON}').version")
          
          # Query npm for the latest published version
          echo "Checking npm for latest version of ${PACKAGE_NAME}..."
          LATEST_VERSION=$(npm view ${PACKAGE_NAME} version 2>/dev/null || echo "0.0.0")
          
          echo "Current version: ${CURRENT_VERSION}, Latest published: ${LATEST_VERSION}"
          
          # If versions differ, update package.json
          if [ "${CURRENT_VERSION}" != "${LATEST_VERSION}" ]; then
            echo "Updating ${PACKAGE_NAME} from ${CURRENT_VERSION} to ${LATEST_VERSION}"
            
            # Use node to update package.json
            node -e "
              const fs = require('fs');
              const pkgPath = './${PACKAGE_JSON}';
              const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
              pkg.version = '${LATEST_VERSION}';
              fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
            "
            
            CHANGES_MADE=true
          fi
        done
        
        # If any changes were made, commit and push
        if $CHANGES_MADE; then
          git add "packages/app-bridge-*/package.json"
          git commit -m "ci: Update package versions to match npm [skip ci]"
          git push origin main
          echo "Updated package versions committed and pushed"
        else
          echo "No version changes to commit"
        fi 